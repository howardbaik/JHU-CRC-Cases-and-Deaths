filter(Province_State %in% us_states[c(1, 4, 20)]) %>%
ggplot(data = ., aes(x = Month, y = Doses_admin_yf_daily)) +
geom_bar(stat = "identity", alpha = 0.25,
aes(color = Province_State, fill = Province_State)) +
scale_y_continuous(labels = unit_format(unit = "M", scale = 1e-6)) +
labs(title = "People Fully Vaccinated by State/Territory",
x = "Month", y = "People Fully Vaccinated")
## US states, major territories, and the district of Columbia
df_cleaned %>%
filter(Province_State != "United States" & Province_State %!in% extra_provinces) %>%
ggplot(data = ., aes(x = Month, y = Doses_admin_yf_daily)) +
geom_line(aes(color = Province_State)) +
scale_y_continuous(labels = unit_format(unit = "M", scale = 1e-6)) +
labs(title = "People Fully Vaccinated by State/Territory",
x = "Month", y = "People Fully Vaccinated")
## US states, major territories, and the district of Columbia
## Line graph
df_cleaned %>%
filter(Province_State != "United States" & Province_State %!in% extra_provinces) %>%
ggplot(data = ., aes(x = Month, y = Doses_admin_yf_daily)) +
geom_line(aes(color = Province_State)) +
scale_y_continuous(labels = unit_format(unit = "M", scale = 1e-6)) +
labs(title = "People Fully Vaccinated by State/Territory",
x = "Month", y = "People Fully Vaccinated") +
theme_minimal()
## US states, major territories, and the district of Columbia
## Line graph
df_cleaned %>%
filter(Province_State != "United States" & Province_State %!in% extra_provinces) %>%
ggplot(data = ., aes(x = Month, y = Doses_admin_yf)) +
geom_line(aes(color = Province_State)) +
scale_y_continuous(labels = unit_format(unit = "M", scale = 1e-6)) +
labs(title = "People Fully Vaccinated by State/Territory",
x = "Month", y = "People Fully Vaccinated") +
theme_minimal()
colnames(census_2010to2023)
subset_census <- cbind(census_2010to2023[, 1:5],
census_2010to2023[str_detect(colnames(census_2010to2023),
"\\bpop_estimate")])
subset_census
subset_census <- cbind(census_2010to2023[, "state"],
census_2010to2023[str_detect(colnames(census_2010to2023),
"\\bpop_estimate")])
head(subset_census)
subset_census <- cbind(census_2010to2023[, c("state")],
census_2010to2023[str_detect(colnames(census_2010to2023),
"\\bpop_estimate")])
head(subset_census)
subset_census <- cbind(census_2010to2023[, c("state")],
census_2010to2023[str_detect(colnames(census_2010to2023),
"\\bpop_estimate")]) %>%
`colnames<-`(c("state", colnames(.)[-1]))
head(subset_census)
subset_census$state %in% df_cleaned$Province_State
df_cleaned$Province_State %in% subset_census$state
unique(df_cleaned$Province_State) %in% subset_census$state
unique(df_cleaned$Province_State)[unique(df_cleaned$Province_State) %in% subset_census$state]
unique(df_cleaned$Province_State)[unique(df_cleaned$Province_State) %!in% subset_census$state]
filter(df_cleaned, unique(df_cleaned$Province_State) %!in% subset_census$state)
filter(df_cleaned, df_cleaned$Province_State %in% subset_census$state)
df_filtered <- filter(df_cleaned, df_cleaned$Province_State %in% subset_census$state)
df_filtered$Province_State %>% unique()
dim(df_filtered)
dim(df_cleaned)
1736 - 1456
1736/280
subset_census$state
df_filtered[df_filtered$Province_State %in% subset_census$state[1], ]
a <- df_filtered[df_filtered$Province_State %in% subset_census$state[1], ]
month(a$Month)
install.packages("lubridate")
library(readr)
library(tidyr)
library(dplyr)
library(stringr)
library(lubridate)
library(scales)
library(ggplot2)
## Function to check if an element is not in a vector
"%!in%" <- function(x,y)!('%in%'(x,y))
df.url <- "https://raw.githubusercontent.com/govex/COVID-19/refs/heads/master/data_tables/vaccine_data/us_data/time_series/time_series_covid19_vaccine_us.csv"
df     <- read_csv(file = df.url, show_col_types = FALSE) %>%
as.data.frame()
census_2010to2023 <- read.csv("Population Estimates and Projections/US_Census Population Estimates_2010 to 2023.csv",
header = TRUE) %>% .[, -1]
## View the first and last few rows of the data
head(df)
tail(df)
## Number of rows and columns
dim(df)
df_cleaned <- read_csv("Cleaning Raw Data/Vaccinations Aggregated by Month.csv", show_col_types = FALSE) %>%
as.data.frame() %>% .[, -1]
## View the first and last few rows of the data
head(df_cleaned)
tail(df_cleaned)
## Number of rows and columns
dim(df_cleaned)
## Separate out the different regions or patient status vaccination counts
## were recorded.
unique_provinces = df_cleaned$Province_State %>% unique()
us_states       = c(datasets::state.name, "District of Columbia") %>% sort()
us_territories  = c("American Samoa", "Guam", "Northern Mariana Islands",
"Puerto Rico", "Virgin Islands")
extra_provinces = unique_provinces %>% .[. %!in% c("United States", us_states, us_territories)]
cumulative_counts <- colnames(df_cleaned)[3:6]
daily_coounts     <- colnames(df_cleaned)[7:10]
## Number of rows and columns
dim(df_cleaned)
## Separate out the different regions or patient status vaccination counts
## were recorded.
unique_provinces = df_cleaned$Province_State %>% unique()
us_states       = c(datasets::state.name, "District of Columbia") %>% sort()
us_territories  = c("American Samoa", "Guam", "Northern Mariana Islands",
"Puerto Rico", "Virgin Islands")
extra_provinces = unique_provinces %>% .[. %!in% c("United States", us_states, us_territories)]
## The columns we are interested in by cumulative and daily counts.
cumulative_counts <- colnames(df_cleaned)[3:6]
daily_coounts     <- colnames(df_cleaned)[7:10]
## US states, major territories, and the district of Columbia
## Line graph
df_cleaned %>%
filter(Province_State != "United States" & Province_State %!in% extra_provinces) %>%
ggplot(data = ., aes(x = Month, y = Doses_admin_yf)) +
geom_line(aes(color = Province_State)) +
scale_y_continuous(labels = unit_format(unit = "M", scale = 1e-6)) +
labs(title = "People Fully Vaccinated by State/Territory",
x = "Month", y = "People Fully Vaccinated") +
theme_minimal()
## US states, major territories, and the district of Columbia
df_cleaned %>%
filter(Province_State %in% us_states[c(1, 4, 20)]) %>%
ggplot(data = ., aes(x = Month, y = Doses_admin_yf_daily)) +
geom_bar(stat = "identity", alpha = 0.25,
aes(color = Province_State, fill = Province_State)) +
scale_y_continuous(labels = unit_format(unit = "M", scale = 1e-6)) +
labs(title = "People Fully Vaccinated by State/Territory",
x = "Month", y = "People Fully Vaccinated") +
theme_minimal()
colnames(census_2010to2023)
subset_census <- cbind(census_2010to2023[, c("state")],
census_2010to2023[str_detect(colnames(census_2010to2023),
"\\bpop_estimate")]) %>%
`colnames<-`(c("state", colnames(.)[-1]))
df_filtered <- filter(df_cleaned, df_cleaned$Province_State %in% subset_census$state)
a
month(a$Month)
year(a$Month)
df_filtered[df_filtered$Province_State %in% subset_census$state[i], ] %>% year(.$Month)
df_filtered[df_filtered$Province_State %in% subset_census$state[1], ] %>% year(.$Month)
df_filtered[df_filtered$Province_State %in% subset_census$state[1], ] %>% year(.[, "Month"])
df_filtered[df_filtered$Province_State %in% subset_census$state[1], "Month"] %>% year()
df_filtered %>% .[.$Province_State %in% subset_census$state[1], "Month"] %>% year()
staged_dates <- df_filtered %>% .[.$Province_State %in% subset_census$state[1], "Month"] %>% year()
staged_dates
str_detect(colnames(subset_census$state), stage_dates)
rm(staged_dates)
staged_dates <- df_filtered %>% .[.$Province_State %in% subset_census$state[1], ] %>% year(.$Month)
staged_dates <- df_filtered %>% .[.$Province_State %in% subset_census$state[1], "Month"] %>% year()
str_detect(colnames(subset_census$state), staged_dates)
str_detect(colnames(subset_census$state), staged_dates[1])
staged_dates[1]
str_detect(colnames(subset_census$state), str_c("_", staged_dates[1]))
str_detect(colnames(subset_census), str_c("_", staged_dates[1]))
str_detect(colnames(subset_census), staged_dates[1])
colnames(subset_census)[str_detect(colnames(subset_census), str_c("_", staged_dates[1]))]
subset_census[, str_detect(colnames(subset_census), str_c("_", staged_dates[1]))]
subset_census[1, str_detect(colnames(subset_census), str_c("_", staged_dates[1]))]
for(i in 1:length(subset_census$state)){
staged_dates <- df_filtered %>% .[.$Province_State %in% subset_census$state[i], "Month"] %>% year()
relevant_pop_est = c()
for(j in 1:length(staged_dates)){
relevant_pop_est[j] <- subset_census[i, str_detect(colnames(subset_census), str_c("_", staged_dates[i]))]
}
relevant_pop_est
}
rm(staged_dates)
for(i in 1:length(subset_census$state)){
staged_dates <- df_filtered %>% .[.$Province_State %in% subset_census$state[i], "Month"] %>% year()
relevant_pop_est = c()
for(j in 1:length(staged_dates)){
relevant_pop_est[j] <- subset_census[i, str_detect(colnames(subset_census), str_c("_", staged_dates[j]))]
}
relevant_pop_est
}
relevant_pop_est
rm(daily_coounts)
daily_counts      <- colnames(df_cleaned)[7:10]
df_filtered[, daily_counts]
df_filtered[, daily_counts] %>% dim()
sapply(df_filtered[, daily_counts], function(x) x/relevant_pop_est)
sapply(df_filtered[, daily_counts], function(x) (x/relevant_pop_est)*100)
sapply(df_filtered[, daily_counts], function(x) round((x/relevant_pop_est)*100), 2)
sapply(df_filtered[, daily_counts], function(x) round((x/relevant_pop_est)*100, 2) )
sapply(df_filtered[, daily_counts], function(x) round((x/relevant_pop_est)*100, 0) )
sapply(df_filtered[, daily_counts], function(x) round(x/relevant_pop_est, 0) )
sapply(df_filtered[, daily_counts], function(x) round((x/relevant_pop_est)*100, 0) )
relevant_pop_est
relevant_pop_est = c()
for(j in 1:length(staged_dates)){
relevant_pop_est[j] <- subset_census[1, str_detect(colnames(subset_census), str_c("_", staged_dates[j]))]
}
relevant_pop_est
sapply(df_filtered[, daily_counts], function(x) round((x/relevant_pop_est)*100, 0) )
df_filtered %>% .[.$Province_State %in% subset_census$state[i], daily_counts] %>% sapply(., function(x) round((x/relevant_pop_est)*100, 0) )
df_filtered %>% .[.$Province_State %in% subset_census$state[1], daily_counts] %>% sapply(., function(x) round((x/relevant_pop_est)*100, 0) )
rm(staged_dates)
rm(relevant_pop_est)
result = list()
for(i in 1:length(subset_census$state)){
staged_dates <- df_filtered %>% .[.$Province_State %in% subset_census$state[i], "Month"] %>% year()
relevant_pop_est = c()
for(j in 1:length(staged_dates)){
relevant_pop_est[j] <- subset_census[i, str_detect(colnames(subset_census), str_c("_", staged_dates[j]))]
}
relevant_pop_est
result[[i]] <- df_filtered %>% .[.$Province_State %in% subset_census$state[i], daily_counts] %>% sapply(., function(x) round((x/relevant_pop_est)*100, 0) )
}
length(result)
do.call(rbind, result) %>% as.data.frame() %>% .[, -1] %>% head(
)
head(df_filtered)
result = list()
for(i in 1:length(subset_census$state)){
staged_dates <- df_filtered %>% .[.$Province_State %in% subset_census$state[i], "Month"] %>% year()
relevant_pop_est = c()
for(j in 1:length(staged_dates)){
relevant_pop_est[j] <- subset_census[i, str_detect(colnames(subset_census), str_c("_", staged_dates[j]))]
}
precentages <- df_filtered %>% .[.$Province_State %in% subset_census$state[i], daily_counts] %>%
sapply(., function(x) round((x/relevant_pop_est)*100, 0) )
result[[i]] <- cbind(df_filtered[, c("Month", "Province_State")], precentages)
}
do.call(rbind, result) %>% as.data.frame() %>% .[, -1] %>% head()
result = list()
for(i in 1:length(subset_census$state)){
staged_dates <- df_filtered %>% .[.$Province_State %in% subset_census$state[i], "Month"] %>% year()
relevant_pop_est = c()
for(j in 1:length(staged_dates)){
relevant_pop_est[j] <- subset_census[i, str_detect(colnames(subset_census), str_c("_", staged_dates[j]))]
}
precentages <- df_filtered %>% .[.$Province_State %in% subset_census$state[i], daily_counts] %>%
sapply(., function(x) round((x/relevant_pop_est)*100, 0) )
result[[i]] <- cbind(df_filtered[, c("Month", "Province_State")], precentages)
}
do.call(rbind, result) %>% as.data.frame() %>% head()
colnames(df_filtered)
result = list()
for(i in 1:length(subset_census$state)){
staged_dates <- df_filtered %>% .[.$Province_State %in% subset_census$state[i], "Month"] %>% year()
relevant_pop_est = c()
for(j in 1:length(staged_dates)){
relevant_pop_est[j] <- subset_census[i, str_detect(colnames(subset_census), str_c("_", staged_dates[j]))]
}
precentages <- df_filtered %>% .[.$Province_State %in% subset_census$state[i], daily_counts] %>%
sapply(., function(x) round((x/relevant_pop_est)*100, 0) )
result[[i]] <- cbind(df_filtered[, c("Month", "Province_State")], precentages) %>%
`colnames<-`(c("Month", "Province_State", str_c(cumulative_counts, "_percent") ))
}
do.call(rbind, result) %>% as.data.frame() %>% head()
result <- do.call(rbind, result) %>% as.data.frame()
result = list()
for(i in 1:length(subset_census$state)){
staged_dates <- df_filtered %>% .[.$Province_State %in% subset_census$state[i], "Month"] %>% year()
relevant_pop_est = c()
for(j in 1:length(staged_dates)){
relevant_pop_est[j] <- subset_census[i, str_detect(colnames(subset_census), str_c("_", staged_dates[j]))]
}
precentages <- df_filtered %>% .[.$Province_State %in% subset_census$state[i], daily_counts] %>%
sapply(., function(x) round((x/relevant_pop_est)*100, 0) )
result[[i]] <- cbind(df_filtered[, c("Month", "Province_State")], precentages)
}
result <- do.call(rbind, result) %>% as.data.frame() %>%
`colnames<-`(c("Month", "Province_State", str_c(cumulative_counts, "_percent") ))
head(result)
df_monotonic <- merge(df_filtered, result, by = c("Month", "Province_State"))
rm(df_monotonic)
df_total <- merge(df_filtered, result, by = c("Month", "Province_State"))
head()
head(df_total)
df_filtered <- filter(df_cleaned, df_cleaned$Province_State %in% subset_census$state)
head(df_filtered)
result = list()
for(i in 1:length(subset_census$state)){
staged_dates <- df_filtered %>% .[.$Province_State %in% subset_census$state[i], "Month"] %>% year()
relevant_pop_est = c()
for(j in 1:length(staged_dates)){
relevant_pop_est[j] <- subset_census[i, str_detect(colnames(subset_census), str_c("_", staged_dates[j]))]
}
precentages <- df_filtered %>% .[.$Province_State %in% subset_census$state[i], daily_counts] %>%
sapply(., function(x) round((x/relevant_pop_est)*100, 0) )
result[[i]] <- cbind(df_filtered[, c("Month", "Province_State")], precentages)
}
result <- do.call(rbind, result) %>% as.data.frame() %>%
`colnames<-`(c("Month", "Province_State", str_c(cumulative_counts, "_percent") ))
head(result)
head(df_filtered)
merge(df_filtered, result, by = c("Month", "Province_State")) %>% head()
merge(result, df_filtered, by = c("Month", "Province_State")) %>% head()
dim(df_filtered)
dim(result)
result = list()
for(i in 1:length(subset_census$state)){
staged_dates <- df_filtered %>% .[.$Province_State %in% subset_census$state[i], "Month"] %>% year()
relevant_pop_est = c()
for(j in 1:length(staged_dates)){
relevant_pop_est[j] <- subset_census[i, str_detect(colnames(subset_census), str_c("_", staged_dates[j]))]
}
precentages <- df_filtered %>% .[.$Province_State %in% subset_census$state[i], daily_counts] %>%
sapply(., function(x) round((x/relevant_pop_est)*100, 0) )
result[[i]] <- cbind(df_filtered[, c("Month", "Province_State")], precentages)
}
result = list()
for(i in 1:length(subset_census$state)){
staged_dates <- df_filtered %>% .[.$Province_State %in% subset_census$state[i], "Month"] %>% year()
relevant_pop_est = c()
for(j in 1:length(staged_dates)){
relevant_pop_est[j] <- subset_census[i, str_detect(colnames(subset_census), str_c("_", staged_dates[j]))]
}
precentages <- df_filtered[df_filtered$Province_State %in% subset_census$state[i], daily_counts] %>%
sapply(., function(x) round((x/relevant_pop_est)*100, 0) )
result[[i]] <- cbind(df_filtered[, c("Month", "Province_State")], precentages)
}
result <- do.call(rbind, result) %>% as.data.frame() %>%
`colnames<-`(c("Month", "Province_State", str_c(cumulative_counts, "_percent") ))
dim(result)
result = list()
for(i in 1:length(subset_census$state)){
staged_dates <- df_filtered %>% .[.$Province_State %in% subset_census$state[i], "Month"] %>% year()
relevant_pop_est = c()
for(j in 1:length(staged_dates)){
relevant_pop_est[j] <- subset_census[i, str_detect(colnames(subset_census), str_c("_", staged_dates[j]))]
}
precentages <- df_filtered[df_filtered$Province_State %in% subset_census$state[i], daily_counts] %>%
sapply(., function(x) round((x/relevant_pop_est)*100, 0) )
result[[i]] <- cbind(df_filtered[, c("Month", "Province_State")], precentages)
}
result[[1]] %>% dim()
dim(df_filtered)
result = list()
for(i in 1:length(subset_census$state)){
subset       <- df_filtered %>% .[.$Province_State %in% subset_census$state[i], ]
staged_dates <- subset[, "Month"] %>% year()
relevant_pop_est = c()
for(j in 1:length(staged_dates)){
relevant_pop_est[j] <- subset_census[i, str_detect(colnames(subset_census), str_c("_", staged_dates[j]))]
}
precentages <- subset[, daily_counts] %>% sapply(., function(x) round((x/relevant_pop_est)*100, 0) )
result[[i]] <- cbind(df_filtered[, c("Month", "Province_State")], precentages)
}
result[[1]] %>% dim()
result = list()
for(i in 1:length(subset_census$state)){
subset       <- df_filtered %>% .[.$Province_State %in% subset_census$state[i], ]
staged_dates <- subset[, "Month"] %>% year()
relevant_pop_est = c()
for(j in 1:length(staged_dates)){
relevant_pop_est[j] <- subset_census[i, str_detect(colnames(subset_census), str_c("_", staged_dates[j]))]
}
precentages <- subset[, daily_counts] %>% sapply(., function(x) round((x/relevant_pop_est)*100, 0) )
result[[i]] <- cbind(subset[, c("Month", "Province_State")], precentages)
}
result <- do.call(rbind, result) %>% as.data.frame() %>%
`colnames<-`(c("Month", "Province_State", str_c(cumulative_counts, "_percent") ))
result = list()
result = list()
for(i in 1:length(subset_census$state)){
subset       <- df_filtered %>% .[.$Province_State %in% subset_census$state[i], ]
staged_dates <- subset[, "Month"] %>% year()
relevant_pop_est = c()
for(j in 1:length(staged_dates)){
relevant_pop_est[j] <- subset_census[i, str_detect(colnames(subset_census), str_c("_", staged_dates[j]))]
}
precentages <- subset[, daily_counts] %>% sapply(., function(x) round((x/relevant_pop_est)*100, 0) )
result[[i]] <- cbind(subset[, c("Month", "Province_State")], precentages)
}
result <- do.call(rbind, result) %>% as.data.frame() %>%
`colnames<-`(c("Month", "Province_State", str_c(cumulative_counts, "_percent") ))
dim(result)
df_total <- merge(df_filtered, result, by = c("Month", "Province_State"))
head(df_total)
## US states, major territories, and the district of Columbia
df_total %>%
filter(Province_State != "US" & Province_State %!in% extra_provinces) %>%
ggplot(data = ., aes(x = Month, y = People_at_least_one_dose)) +
geom_line(aes(color = Province_State)) +
scale_y_continuous(labels = unit_format(unit = "M", scale = 1e-6)) +
labs(title = "People Fully Vaccinated by State/Territory",
x = "Month", y = "People Fully Vaccinated") +
theme_minimal()
names(df_total)
## US states, major territories, and the district of Columbia
df_total %>%
filter(Province_State != "US" & Province_State %!in% extra_provinces) %>%
ggplot(data = ., aes(x = Month, y = Doses_admin_yf_percent)) +
geom_line(aes(color = Province_State)) +
scale_y_continuous(labels = unit_format(unit = "M", scale = 1e-6)) +
labs(title = "People Fully Vaccinated by State/Territory",
x = "Month", y = "People Fully Vaccinated") +
theme_minimal()
## US states, major territories, and the district of Columbia
df_total %>%
filter(Province_State != "US" & Province_State %!in% extra_provinces) %>%
ggplot(data = ., aes(x = Month, y = Doses_admin_yf_percent)) +
geom_line(aes(color = Province_State)) +
#scale_y_continuous(labels = unit_format(unit = "M", scale = 1e-6)) +
labs(title = "People Fully Vaccinated by State/Territory",
x = "Month", y = "People Fully Vaccinated") +
theme_minimal()
## US states, major territories, and the district of Columbia
df_cleaned %>%
filter(Province_State %in% us_states[c(1, 4, 20)]) %>%
ggplot(data = ., aes(x = Month, y = Doses_admin_yf_daily)) +
geom_bar(stat = "identity", alpha = 0.25,
aes(color = Province_State, fill = Province_State)) +
scale_y_continuous(labels = unit_format(unit = "M", scale = 1e-6)) +
labs(title = "People Fully Vaccinated by State/Territory",
x = "Month", y = "People Fully Vaccinated") +
theme_minimal()
df_total %>%
filter(Province_State %in% us_states[c(1, 4, 20)]) %>%
ggplot(data = ., aes(x = Month, y = Doses_admin_yf_percent)) +
geom_bar(stat = "identity", alpha = 0.25,
aes(color = Province_State, fill = Province_State)) +
scale_y_continuous(labels = unit_format(unit = "M", scale = 1e-6)) +
labs(title = "People Fully Vaccinated by State/Territory",
x = "Month", y = "People Fully Vaccinated") +
theme_minimal()
df_total %>%
filter(Province_State %in% us_states[c(1, 4, 20)]) %>%
ggplot(data = ., aes(x = Month, y = Doses_admin_yf_percent)) +
geom_bar(stat = "identity", alpha = 0.25,
aes(color = Province_State, fill = Province_State)) +
labs(title = "People Fully Vaccinated by State/Territory",
x = "Month", y = "People Fully Vaccinated") +
theme_minimal()
## US states, major territories, and the district of Columbia
## Line graph
df_cleaned %>%
filter(Province_State != "United States" & Province_State %!in% extra_provinces) %>%
ggplot(data = ., aes(x = Month, y = Doses_admin_yf)) +
geom_line(aes(color = Province_State)) +
scale_y_continuous(labels = unit_format(unit = "M", scale = 1e-6)) +
labs(title = "People Fully Vaccinated by State/Territory",
x = "Month", y = "People Fully Vaccinated") +
theme_minimal()
renv::restore()
renv::snapshot(confirm = FALSE)
renv::restore()
library(readr)
library(tidyr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(plotly)
covid19_confirmed_url <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/refs/heads/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv"
covid19_confirmed_raw  <- read_csv(file = covid19_confirmed_url, show_col_types = FALSE)
covid19_death_url <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/refs/heads/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_US.csv"
covid19_death_raw  <- read_csv(file = covid19_death_url, show_col_types = FALSE)
# Prepare data for plotting
covid19_confirmed_processed <- covid19_confirmed_raw %>%
pivot_longer(cols = "1/22/20":"3/9/23",
names_to = "date",
values_to = "cumulative_count") %>%
mutate(date = mdy(date)) %>%
group_by(date) %>%
summarise(cumulative_count = sum(cumulative_count, na.rm = TRUE)) %>%
ungroup() %>%
mutate(daily_count = c(cumulative_count[1], diff(cumulative_count)))
# Prepare data for plotting
covid19_death_processed <- covid19_death_raw %>%
pivot_longer(cols = "1/22/20":"3/9/23",
names_to = "date",
values_to = "cumulative_count") %>%
mutate(date = mdy(date)) %>%
group_by(date) %>%
summarise(cumulative_count = sum(cumulative_count, na.rm = TRUE)) %>%
ungroup() %>%
mutate(daily_count = c(cumulative_count[1], diff(cumulative_count)))
# Plot 1: Cases
plot_cases <- covid19_confirmed_processed %>%
# Rename column names so they look nicer in plotly
rename(Date = date, Count = daily_count) %>%
ggplot(aes(Date, Count)) +
geom_line(color = "#00356b") +
scale_x_date(date_labels = "%m/%Y",
breaks = as.Date(c("2020-01-01", "2021-01-01",
"2022-01-01", "2023-01-01"))) +
scale_y_continuous(labels = scales::label_comma()) +
labs(x = NULL,
y = "Daily Counts",
title = "Daily Confirmed Counts of COVID-19 in the US") +
theme_minimal()
# Make plot interactive
ggplotly(plot_cases)
# Plot 2: Deaths
plot_deaths <- covid19_death_processed %>%
# Rename column names so they look nicer in plotly
rename(Date = date, Count = daily_count) %>%
ggplot(aes(Date, Count)) +
geom_line(color = "#880808") +
scale_x_date(date_labels = "%m/%Y",
breaks = as.Date(c("2020-01-01", "2021-01-01",
"2022-01-01", "2023-01-01"))) +
scale_y_continuous(labels = scales::label_comma()) +
labs(x = NULL,
y = "Daily Counts",
title = "Daily Death Counts of COVID-19 in the US") +
theme_minimal()
# Make plot interactive
ggplotly(plot_deaths)
ggplotly(plot_deaths)
View(covid19_death_processed)
